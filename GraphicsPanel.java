/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ysu.student.ppizanias.spacerace;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.Timer;

/**
 *
 * @author pufft
 */
public class GraphicsPanel extends javax.swing.JPanel implements ActionListener{

    private List<Ship> ships;
    private List<Asteroid> asteroids;
    
    /**
     * Creates new form GraphicsPanel
     */
    public GraphicsPanel() {
        initComponents();
       
        ships = new ArrayList();
        asteroids = new ArrayList();
//        Asteroid asteroid = new Asteroid(0, 20);
//       asteroids.add(asteroid);
//        for(int i = 0; i < 10; i++) {
//            Asteroid asteroid = new Asteroid(20, i * 20);
//            if(i % 2 == 0){
//                asteroid.setColor(Color.WHITE);
//            }
//            asteroids.add(asteroid);
//        }
        Ship ship = new Ship(200, 250);
        ships.add(ship);
    }
    
    public void start(){
     Timer timer = new Timer(500, this);  
     timer.start();
    }
    public void remove(Asteroid asteroid){
        if(asteroid.getX() > this.getWidth()) {
          asteroids.remove(0);
      }
    }
    
    public void hasHitShip(Ship ship, Asteroid asteroid) {
//        System.out.println("x = " + asteroid.getX());
//        System.out.println("y = " + asteroid.getY());
//        System.out.println("x abs = " + Math.abs(ship.getX() - asteroid.getX()));
//        System.out.println("y abs = " + Math.abs(ship.getY() - asteroid.getY()));
        if (Math.abs(ship.getX() - asteroid.getX()) < 10 && Math.abs(ship.getY() - asteroid.getY()) < 10) {
         ship.restart();
     } 
      
    }
    public void shipEnd(Ship ship, Graphics graphics){
//      if (border.equals(ship)){
//          ship.restart();
//      } 
    }
         
    
    public void move(Direction direction) {
      Ship ship = ships.get(0);
        switch(direction) {
          case UP:
              ship.setY(ship.getY() - 5);
              break;
          case DOWN:
              ship.setY(ship.getY() + 5);
              break;
              
      }  
    }
    @Override
    public void actionPerformed(ActionEvent actionEvent) {
      Random random = new Random();
        
        for(Asteroid asteroid: asteroids) {
           asteroid.setX(asteroid.getX() + random.nextInt(20) +1 );
           hasHitShip(ships.get(0), asteroid);
        }
    
      
      
      
       Asteroid asteroid = new Asteroid(random.nextInt(10) + 1, random.nextInt(200) + 1);
       asteroids.add(asteroid);
       validate();
       repaint();
       
    }
    @Override
    protected void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);
      
      drawAsteroids(graphics);
      loadImage(graphics);
      drawShip(graphics);
    }
    private void drawAsteroids(Graphics graphics) {
        for(Asteroid asteroid: asteroids) {
            graphics.setColor(asteroid.getColor());
            graphics.fillOval(asteroid.getX(), asteroid.getY(), 10, 10);
        }
    }
    
    Image img;
    
    public void loadImage(Graphics graphics){
        String path = "G:\\Chrome Downloads\\spaceship(3).png";
        File file = new File(path);
        try{
            img = ImageIO.read(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void drawShip(Graphics graphics) {
        for(Ship ship: ships) {
            graphics.setColor(ship.getColor());
            graphics.drawImage(img, ship.getX(), ship.getY(), this);
        }
       
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
